PCHInclude("pyste/common_includes.hpp")
Include("utility")
Include("pyasynchio/primitive.hpp")
Include("pyasynchio/scopeguard.hpp")
declaration_code("""
template<typename FIRST, typename SECOND>
struct std_pair_to_python_tuple
{
    static PyObject* convert(std::pair<FIRST, SECOND> const &pair)
    {
        return incref(make_tuple(pair.first, pair.second).ptr());
    }
};

template<typename FIRST, typename SECOND>
struct std_pair_from_python_tuple
{
    std_pair_from_python_tuple()
    {
        converter::registry::push_back(&convertible
            , &construct
            , type_id<std::pair<FIRST, SECOND> >());
    }

    static void* convertible(PyObject *obj_ptr)
    {
        if (!PySequence_Check(obj_ptr)) return 0;
        if (PySequence_Size(obj_ptr) < 2) return 0;
        handle<> obj_handle(borrowed(obj_ptr));
        object obj(obj_handle);
        extract<FIRST> first_extractor(obj[0]);
       if (!first_extractor.check()) return 0;
        extract<SECOND> second_extractor(obj[1]);
        if (!second_extractor.check()) return 0;
        return obj_ptr;
    }

    static void construct(PyObject *obj_ptr
        , converter::rvalue_from_python_stage1_data* data)
    {
        handle<> obj_handle(borrowed(obj_ptr));
        object obj(obj_handle);
        void* storage = (
            (converter::rvalue_from_python_storage<std::pair<FIRST, SECOND> >*)
            data)->storage.bytes;
        new (storage) std::pair<FIRST, SECOND>(
            extract<FIRST>(obj[0])
            , extract<SECOND>(obj[1]));
        data->convertible = storage;
    }
};

""")

module_code("""
    to_python_converter<
        std::pair<pyasynchio::integer, pyasynchio::integer>
        , std_pair_to_python_tuple<pyasynchio::integer, pyasynchio::integer> >();

    std_pair_from_python_tuple<pyasynchio::integer, pyasynchio::integer>();

    to_python_converter<
        std::pair<const pyasynchio::integer, pyasynchio::integer>
        , std_pair_to_python_tuple<const pyasynchio::integer, pyasynchio::integer> >();
""")